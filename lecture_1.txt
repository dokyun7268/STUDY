
ver 1.0.0

major : 사용성에 변화가 생길 정도로 큰 변화

minor : 특정 기능 추가, 패치가 필요

patch : 일부 기능 추가, 사용자 선택, 간단한 버그 수정 및 개선


git : 코드를 버전에 맞게 관리 + 중앙 저장소의 역할 => 병렬적 개발이 가능

1.0.0 버전에서 게시판, 마이페이지 기능이 필요하다고 합니다.
이 두기능 간의 우선 순위는 존재하지 않음.

A 1.0.0 + 게시판
B 1.0.0 + 마이페이지
->
1.0.0 + 게시판 + 마이페이지

-------------------------------------------------------------------------------------------------------

-- git 사용 메뉴얼 : 로컬(내 컴퓨터) 저장소 생성 --


1. git 다운로드

2. 관리할 코드나 파일을 지정할 폴더 경로 맞추기  -> 폴더가 기준 저장하려고 하는 파일이 있는 폴더 안에 설치

3. 생성 : git init (소스 제어에서 확인)

4. 저장할 파일 지정 : git add 파일명   / git add .  -> 변경 사항이 있는 모든 파일 지정
    - git reset 파일명 -> 지정 취소  git reset . -> 지정된 모든 파일 지정 취소소

5. git commit -m "제목" / -m "본문" / -m "각주"
    - 실제로 저장소를 생성하려고 했더니 나의 이름과 메일을 등록하라고 함.
      Justin K / dkkim7268@gmail.com

작은 commit 작은 PR  -> header 작성하고 저장, section1 작성하고 저장 하는 식으로 짤라서 저장 / 히스토리 관리가 쉬어지고 코드 리뷰나 협업이 수월해 지게

git commit message convention / 팀 내 자율
-feat : tofhdns rlsmd cnrk
-fix : 버그 수정
-docs : 문서 작성 및 수정
-style : 코드 스타일 체인지
-refactor : 기존에 있는 코드들을 리뉴얼링 하는 것 / 코드 리팩토링
-test : 테스트 코드 추가 및 수정
-chore : 기타 등등

.. 새로운 메세지 컨벤션을 추가하는 건 팀의 협의를 통해 결정정

--------------------

branch 

----------------- main (default branch) ----- (release)
----------------- dev (dev branch)    ------- (merge)
                  ------------------- (board branch)
                  ------------------- (my-page branch)
                  ------------------- (page-3 branch)


git branch 브랜치명
git branch
git checkout 브랜치명
git checkout -b 브랜치명 :생성후 이동까지
git checkout -D         :삭제


***** 브린치 생성할 떄 주의점 : 생성할 당시에 내가 위치한 브랜치 기준으로 복사본 생성 *****

ex) dev ->  feat/my-page -> 브랜치 todtjd -> feat/my-page (x)
                       -> dev -> (브랜츠 생성) (dev) (o)


-------------------------------------------

원격 저장소 Github (Web 생성)

- CI/CD continuance Intigration / continuance Development
- GUI  
- 회사에서 공유하고 싶지 않은 코드는 공유하지 않을 수도 있고, 유료로 제공되기도 한다.
- 유사한 저장소 : aws, azure, gitlab, bigbucket ...